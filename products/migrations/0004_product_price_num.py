# Generated by Django 5.2.4 on 2025-08-16 10:00
import re
from decimal import Decimal, InvalidOperation

from django.db import migrations, models, transaction

CLEAN_RE = re.compile(r'[^0-9,.\-]')  # убираем всё, кроме цифр, знака, точки/запятой


def parse_price(raw: str) -> Decimal | None:
    if not raw:
        return None
    s = CLEAN_RE.sub('', raw).strip()
    # если обе точки и запятые встречаются — сначала уберём разделители тысяч
    if s.count(',') > 1 or s.count('.') > 1:
        s = s.replace(' ', '').replace(',', '').replace('.', '')
        # такой кейс лучше признать невалидным
    # Простейшая эвристика: если есть запятая и нет точки — это десятичный разделитель
    if ',' in s and '.' not in s:
        s = s.replace(',', '.')
    # Убираем пробелы на всякий
    s = s.replace(' ', '')
    try:
        return Decimal(s)
    except (InvalidOperation, ValueError):
        return None


def forwards(apps, schema_editor):
    Product = apps.get_model('products', 'Product')
    with transaction.atomic():
        qs = Product.objects.all().only('id', 'price')
        bad_ids = []
        for p in qs.iterator(chunk_size=500):
            value = parse_price(p.price)
            if value is None:
                bad_ids.append(p.id)
            else:
                Product.objects.filter(pk=p.pk).update(price_num=value)
        # Если были проблемные записи — полезно залогировать (в реальном коде — в файл/таблицу)
        if bad_ids:
            print(
                f"[price migration] Could not parse price for IDs: {bad_ids[:20]}{'...' if len(bad_ids) > 20 else ''}")


def backwards(apps, schema_editor):
    Product = apps.get_model('products', 'Product')
    Product.objects.update(price_num=None)


class Migration(migrations.Migration):
    dependencies = [
        ('products', '0003_alter_product_rating'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='price_num',
            field=models.DecimalField(blank=True, db_index=True, decimal_places=2, max_digits=12, null=True),
        ),
        migrations.RunPython(forwards, backwards),
        migrations.RemoveField(
            model_name="product",
            name="price",
        ),
        migrations.RenameField(
            model_name='product',
            old_name='price_num',
            new_name='price'
        ),
        migrations.AlterField(
            model_name="product",
            name="price",
            field=models.DecimalField(blank=False, db_index=True, decimal_places=2, max_digits=12, null=False),
        ),
    ]
